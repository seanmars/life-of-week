{"version":3,"sources":["components/LifeRow.js","components/Square.js","common/LifeState.js","components/Life.js","App.js","reportWebVitals.js","index.js"],"names":["LifeRow","props","children","className","Square","state","clsx","getStateClass","LifeState","Life","lifeExpectancyYear","birthYear","birthMonth","birthDate","perRowWeeks","endYear","nowDate","Date","useState","data","setData","getEachRowWeeks","weeks","eachWeekOfInterval","start","end","_","chunk","reverse","useEffect","map","row","index","d","now","target","nowYear","getYear","targetYear","result","differenceInCalendarISOWeeks","stateOfYearWeek","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAEMA,EAAU,SAACC,GAAW,IAClBC,EAAaD,EAAbC,SAER,OAAQ,qBAAKC,UAAU,WAAf,SACLD,K,OCHCE,EAAS,SAACH,GAAW,IACjBI,EAAUJ,EAAVI,MAMR,OACE,mCACE,sBAAMF,UAAWG,YAAK,SANJ,SAACD,GACrB,MAAM,QAAN,OAAeA,GAKmBE,CAAcF,SCZ9CG,EACE,OADFA,EAEK,UAFLA,EAGI,SAHJA,EAIE,OCMFC,EAAO,SAACR,GAAW,IACfS,EAAsET,EAAtES,mBAAoBC,EAAkDV,EAAlDU,UAAWC,EAAuCX,EAAvCW,WAAYC,EAA2BZ,EAA3BY,UAAWC,EAAgBb,EAAhBa,YACxDC,EAAUJ,EAAYD,EACtBM,EAAU,IAAIC,KAHE,EAIEC,mBAAS,IAJX,mBAIfC,EAJe,KAITC,EAJS,KAmBhBC,EAAkB,WACtB,IAAMC,EAVC,IAAIC,IAAmB,CAC5BC,MAAO,IAAIP,KAAKN,EAAWC,EAAYC,GACvCY,IAAK,IAAIR,KAAKF,EAASH,EAAYC,KASrC,OAAOa,IAAEC,MAAML,EAAOR,GAAac,WAqCrC,OAJAC,qBAAU,WACRT,EAAQC,OACP,CAACX,EAAoBC,EAAWG,IAE3B,mCACLK,GAAQA,EAAKW,KAAI,SAACC,EAAKC,GACtB,OAAQ,cAAC,EAAD,UACLD,EAAID,KAAI,SAAAG,GACP,IAAM5B,EAhCU,SAAC6B,EAAKC,GAC5B,IAAMC,EAAUC,YAAQH,GAClBI,EAAaD,YAAQF,GAE3B,GAAIC,EAAUE,EACZ,OAAO9B,EAGT,GAAI4B,EAAUE,EACZ,OAAO9B,EAGT,IAAM+B,EAASC,YAA6BN,EAAKC,GACjD,OAAe,IAAXI,EACK/B,EACE+B,EAAS,EACX/B,EACE+B,EAAS,EACX/B,EAGFA,EAWaiC,CAAgBzB,EAASiB,GACvC,OAAQ,cAAC,EAAD,CAAgB5B,MAAOA,GAAV4B,OAHHD,SAkB5BvB,EAAKiC,aAAe,CAClBhC,mBAAoB,GACpBE,WAAY,EACZC,UAAW,EACXC,YAAa,ICjFA6B,MARf,WACE,OACE,qBAAKxC,UAAU,YAAf,SACE,cAAC,EAAD,CAAMQ,UAAW,UCMRiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ef945a1b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst LifeRow = (props) => {\r\n  const { children } = props;\r\n\r\n  return (<div className=\"life-row\">\r\n    {children}\r\n  </div>);\r\n};\r\n\r\nexport { LifeRow };","import React from 'react';\r\nimport clsx from 'clsx';\r\n\r\nconst Square = (props) => {\r\n  const { state } = props;\r\n\r\n  const getStateClass = (state) => {\r\n    return `life-${state}`;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span className={clsx('square', getStateClass(state))}>\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport { Square };","const LifeState = {\r\n  past: 'past',\r\n  current: 'current',\r\n  future: 'future',\r\n  none: 'none',\r\n};\r\n\r\nexport { LifeState };","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { eachWeekOfInterval, getISOWeek, getYear, differenceInCalendarISOWeeks } from 'date-fns';\r\nimport _ from 'lodash';\r\n\r\nimport { LifeRow } from './LifeRow';\r\nimport { Square } from './Square';\r\nimport { LifeState } from '../common/LifeState';\r\n\r\n\r\nconst Life = (props) => {\r\n  const { lifeExpectancyYear, birthYear, birthMonth, birthDate, perRowWeeks } = props;\r\n  const endYear = birthYear + lifeExpectancyYear;\r\n  const nowDate = new Date();\r\n  const [data, setData] = useState([]);\r\n\r\n  /**\r\n   * @return {Date[]}\r\n   */\r\n  const getWeeks = () => {\r\n    return new eachWeekOfInterval({\r\n      start: new Date(birthYear, birthMonth, birthDate),\r\n      end: new Date(endYear, birthMonth, birthDate)\r\n    });\r\n  };\r\n\r\n  /**\r\n   * @return {Date[][]}\r\n   */\r\n  const getEachRowWeeks = () => {\r\n    const weeks = getWeeks();\r\n    return _.chunk(weeks, perRowWeeks).reverse();\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param {Date} now\r\n   * @param {Date} target\r\n   * @return {number}\r\n   */\r\n  const stateOfYearWeek = (now, target) => {\r\n    const nowYear = getYear(now);\r\n    const targetYear = getYear(target);\r\n\r\n    if (nowYear > targetYear) {\r\n      return LifeState.past;\r\n    }\r\n\r\n    if (nowYear < targetYear) {\r\n      return LifeState.future;\r\n    }\r\n\r\n    const result = differenceInCalendarISOWeeks(now, target);\r\n    if (result === 0) {\r\n      return LifeState.current;\r\n    } else if (result > 0) {\r\n      return LifeState.past;\r\n    } else if (result < 0) {\r\n      return LifeState.future;\r\n    }\r\n\r\n    return LifeState.none;\r\n  };\r\n\r\n  useEffect(() => {\r\n    setData(getEachRowWeeks());\r\n  }, [lifeExpectancyYear, birthYear, perRowWeeks]);\r\n\r\n  return (<>\r\n    {data && data.map((row, index) => {\r\n      return (<LifeRow key={index}>\r\n        {row.map(d => {\r\n          const state = stateOfYearWeek(nowDate, d);\r\n          return (<Square key={d} state={state} />);\r\n        })}\r\n      </LifeRow>);\r\n    })}\r\n  </>);\r\n};\r\n\r\nLife.propTypes = {\r\n  lifeExpectancyYear: PropTypes.number,\r\n  birthYear: PropTypes.number,\r\n  birthMonth: PropTypes.number,\r\n  birthDate: PropTypes.number,\r\n  perRowWeeks: PropTypes.number,\r\n};\r\n\r\nLife.defaultProps = {\r\n  lifeExpectancyYear: 70,\r\n  birthMonth: 1,\r\n  birthDate: 1,\r\n  perRowWeeks: 52,\r\n};\r\n\r\nexport { Life };","import './App.css';\nimport { Life } from './components/Life';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Life birthYear={1985} />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}